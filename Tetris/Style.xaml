<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Tetris">
    <!--xmlns:controls="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"-->

    <!-- Color -->
    <SolidColorBrush x:Key="TetrisPanelBackground" Color="Tan"/>
    <SolidColorBrush x:Key="TetrisTankBackgroundStarted" Color="White"/>
    <SolidColorBrush x:Key="TetrisTankBackgroundPaused" Color="White"/>
    <SolidColorBrush x:Key="TetrisTankBackgroundStopped" Color="Linen"/>
    <SolidColorBrush x:Key="TetrisBlockBorderColor" Color="DarkSlateGray"/>
    <SolidColorBrush x:Key="TetrisLabelColor" Color="DimGray"/>
    <SolidColorBrush x:Key="TetrisValueColor" Color="Black"/>
    <SolidColorBrush x:Key="TetrisMouseOverControl" Color="#EEEEEE"/>
    
    <!-- Opacity -->
    <sys:Double x:Key="FigureShadowOpacity">0.1</sys:Double>
    <sys:Double x:Key="GameInactiveOpacity">0.5</sys:Double>

    <!-- Size -->
    <sys:Double x:Key="SmallButtonSize">20</sys:Double>
    <sys:Double x:Key="ButtonSize">40</sys:Double>

    <!-- Panel -->
    <Style x:Key="TetrisControl">
        <Setter Property="Control.Background" Value="{StaticResource TetrisPanelBackground}"/>
    </Style>
    <Style x:Key="TetrisTank">
        <!--<Setter Property="Control.Background" Value="{StaticResource TetrisTankBackgroundStopped}"/>
        <Setter Property="Control.Margin" Value="0,10,0,10"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:TetrisControl}}, Path=IsKeyboardFocusWithin, Mode=OneWay}" Value="True">
                <Setter Property="Control.Background" Value="{StaticResource TetrisTankBackgroundStarted}"/>
            </DataTrigger>
        </Style.Triggers>-->
        <Setter Property="Control.Background" Value="{StaticResource TetrisTankBackgroundStopped}"/>
    </Style>
    <Style x:Key="TetrisPanelControls">
        <Setter Property="Control.Background" Value="{StaticResource TetrisPanelBackground}"/>
        <Setter Property="Control.Margin" Value="0,1,0,1"/>
    </Style>
    <Style x:Key="TetrisPanelSettings">
        <Setter Property="Control.Background" Value="{StaticResource TetrisPanelBackground}"/>
        <Setter Property="Control.Margin" Value="0,1,0,1"/>
    </Style>

    <!-- Figure -->
    <Style TargetType="Rectangle">
        <Setter Property="Stroke" Value="{StaticResource TetrisBlockBorderColor}"/>
        <Setter Property="StrokeThickness" Value="2"/>
        <Setter Property="Margin" Value="0, 0, 1, 1"/>
    </Style>

    <!-- Text -->
    <Style x:Key="LabelStyle">
        <Setter Property="Label.FontFamily" Value="Verdana"/>
    </Style>
    <Style x:Key="CommandsLabelStyle" BasedOn="{StaticResource LabelStyle}">
        <Setter Property="Label.FontSize" Value="16"/>
        <Setter Property="Label.FontWeight" Value="Medium"/>
        <Setter Property="Label.Foreground" Value="{StaticResource TetrisLabelColor}"/>
    </Style>
    <Style x:Key="CommandsValueStyle" BasedOn="{StaticResource LabelStyle}">
        <Setter Property="Label.FontSize" Value="18"/>
        <Setter Property="Label.FontWeight" Value="Bold"/>
        <Setter Property="Label.Foreground" Value="{StaticResource TetrisValueColor}"/>
    </Style>
    <Style x:Key="SettingsLabelStyle" BasedOn="{StaticResource LabelStyle}">
        <Setter Property="Label.FontSize" Value="16"/>
        <Setter Property="Label.FontWeight" Value="Medium"/>
        <Setter Property="Label.Foreground" Value="{StaticResource TetrisLabelColor}"/>
    </Style>
    <Style x:Key="SettingsValueStyle" BasedOn="{StaticResource LabelStyle}">
        <Setter Property="Label.FontSize" Value="18"/>
        <Setter Property="Label.FontWeight" Value="Bold"/>
        <Setter Property="Label.Foreground" Value="{StaticResource TetrisValueColor}"/>
    </Style>
    <Style x:Key="SettingsTextValueStyle" BasedOn="{StaticResource LabelStyle}">
        <Setter Property="Label.FontSize" Value="12"/>
        <Setter Property="Label.FontWeight" Value="Bold"/>
        <Setter Property="Label.Foreground" Value="{StaticResource TetrisValueColor}"/>
    </Style>

    <!-- Button -->
    <Style TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="buttonBorder" BorderThickness="0" Height="20" Width="20">
                        <ContentPresenter x:Name="buttonContent"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="buttonBorder" Property="Height" Value="18"/>
                            <Setter TargetName="buttonBorder" Property="Width" Value="18"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="buttonContent" Property="Opacity" Value="0.2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

        <!-- TextBox -->
    <Style TargetType="TextBox">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Border" Background="{StaticResource TetrisPanelBackground}" BorderThickness="0">
                        <ScrollViewer Margin="1" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Control.Background" Value="{StaticResource TetrisMouseOverControl}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="Control.Background" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Flat ComboBox -->
    <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="20"/>
            </Grid.ColumnDefinitions>

            <Border Grid.ColumnSpan="2" Name="Border" BorderThickness="0" Background="{StaticResource TetrisPanelBackground}"/>
            <Border Grid.Column="1" Margin="1" Name="ButtonBorder" BorderThickness="0" Background="{StaticResource TetrisPanelBackground}"/>
            <Path Name="Arrow" Grid.Column="1" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource TetrisValueColor}"/>
        </Grid>
        
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="ButtonBorder" Value="{StaticResource TetrisMouseOverControl}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Fill" TargetName="Arrow" Value="DimGray"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="Arrow" Value="Gray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- <Style x:Key="ComboBoxFlatStyle"  TargetType="{x:Type ComboBox}"> -->
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource SettingsTextValueStyle}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2"
                                ClickMode="Press" Focusable="False"
                                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                        <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"
                                HorizontalAlignment="Left" VerticalAlignment="Center"                              
                                Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>

                        <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"                     
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Visibility="Hidden" Background="Transparent"
                                HorizontalAlignment="Left" VerticalAlignment="Center"
                                Focusable="True">
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        
                        <!-- Popup showing items -->
                        <Popup Name="Popup" Placement="Bottom" Focusable="False" AllowsTransparency="True" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border Name="DropDownBorder" Background="White" Margin="0, 1, 0, 0" BorderThickness="0"/>
                                <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="Gray"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- End of Flat ComboBox -->

    <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
    
</ResourceDictionary>